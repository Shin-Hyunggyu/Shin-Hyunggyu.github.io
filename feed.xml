<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-22T11:02:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dev Store</title><subtitle>프로그래밍을 하면서 얻은 지식이나 생각을 기록하는 저장소입니다.</subtitle><author><name>lofty87</name><email>lofty87@daum.net</email></author><entry><title type="html">Docker 에서 자주 사용하는 명령어(… 작성중)</title><link href="http://localhost:4000/docker/20181019/docker-command" rel="alternate" type="text/html" title="Docker 에서 자주 사용하는 명령어(... 작성중)" /><published>2018-10-19T00:00:00+09:00</published><updated>2018-10-19T00:00:00+09:00</updated><id>http://localhost:4000/docker/20181019/docker-command</id><content type="html" xml:base="http://localhost:4000/docker/20181019/docker-command">&lt;blockquote&gt;
  &lt;p&gt;docker build –tag nginx:test(image) .(location) // Dockerfile 로 image build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker run –name nginx(alias) -p 80(client):4000(container) nginx:test(image)  // image 로 container 생성하고 바로 올리기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker rmi nginx:test(image)  // image 삭제하기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker create –name nginx(alias) -p 80(client):4000(container) nginx:test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker rm (-f) nginx(container alias name)  // container 삭제&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker rm -f $(docker ps -a -q)  // 모든 container 삭제&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker start nginx(container alias name)  // container 시작&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker stop nginx(container alias name)  // container 중지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker ps -a // 실행중인 container 출력, -a option 은 stop 되있는 container 도 출력&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker container ls  // container 리스트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker image ls  // image 리스트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… 작성중&lt;/p&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="docker" /><category term="command" /><summary type="html">docker build –tag nginx:test(image) .(location) // Dockerfile 로 image build</summary></entry><entry><title type="html">Docker 와 nginx 를 사용해 Reverse Proxy 서버를 구성하자 (HTTP Load Balancer)(… 작성중)</title><link href="http://localhost:4000/docker/20181019/docker-nginx" rel="alternate" type="text/html" title="Docker 와 nginx 를 사용해 Reverse Proxy 서버를 구성하자 (HTTP Load Balancer)(... 작성중)" /><published>2018-10-19T00:00:00+09:00</published><updated>2018-10-19T00:00:00+09:00</updated><id>http://localhost:4000/docker/20181019/docker-nginx</id><content type="html" xml:base="http://localhost:4000/docker/20181019/docker-nginx">&lt;p&gt;… 작성중&lt;/p&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="docker" /><category term="nginx" /><summary type="html">… 작성중</summary></entry><entry><title type="html">Docker 소개(… 작성중)</title><link href="http://localhost:4000/docker/20181019/docker-introduce" rel="alternate" type="text/html" title="Docker 소개(... 작성중)" /><published>2018-10-19T00:00:00+09:00</published><updated>2018-10-19T00:00:00+09:00</updated><id>http://localhost:4000/docker/20181019/docker-introduce</id><content type="html" xml:base="http://localhost:4000/docker/20181019/docker-introduce">&lt;p&gt;… 작성중&lt;/p&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="docker" /><summary type="html">… 작성중</summary></entry><entry><title type="html">Dockerfile 작성하기(… 작성중)</title><link href="http://localhost:4000/docker/20181019/docker-dockerfile" rel="alternate" type="text/html" title="Dockerfile 작성하기(... 작성중)" /><published>2018-10-19T00:00:00+09:00</published><updated>2018-10-19T00:00:00+09:00</updated><id>http://localhost:4000/docker/20181019/docker-dockerfile</id><content type="html" xml:base="http://localhost:4000/docker/20181019/docker-dockerfile">&lt;p&gt;… 작성중&lt;/p&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="docker" /><category term="dockerfile" /><summary type="html">… 작성중</summary></entry><entry><title type="html">Windows Update, Defender 중지, OneDrive 삭제</title><link href="http://localhost:4000/etc/windows/20181001/windows-update-defender-onedrive" rel="alternate" type="text/html" title="Windows Update, Defender 중지, OneDrive 삭제" /><published>2018-10-01T00:00:00+09:00</published><updated>2018-10-01T00:00:00+09:00</updated><id>http://localhost:4000/etc/windows/20181001/windows-update-defender-onedrive</id><content type="html" xml:base="http://localhost:4000/etc/windows/20181001/windows-update-defender-onedrive">&lt;h1 id=&quot;1-windows-update-중지&quot;&gt;1. Windows Update 중지&lt;/h1&gt;

&lt;h2 id=&quot;1-servicesmsc&quot;&gt;1. services.msc&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-gpeditmsc&quot;&gt;2. gpedit.msc&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-windows-defender-중지&quot;&gt;2. Windows Defender 중지&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-onedrive-삭제&quot;&gt;3. OneDrive 삭제&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/10.jpg&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Linux/2018-10-01/11.jpg&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;OneDrive 삭제&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://drive.google.com/file/d/1CLKKl_I-gZ8HKo9lUupBOqLdnMb1d75V/view?usp=sharing&quot;&gt;&lt;img src=&quot;/assets/img/attach.png&quot; alt=&quot;다운로드&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="windows" /><category term="update" /><category term="defender" /><category term="onedrive" /><summary type="html">1. Windows Update 중지</summary></entry><entry><title type="html">리눅스 환경변수 등록</title><link href="http://localhost:4000/linux/20181001/linux-environment-variable" rel="alternate" type="text/html" title="리눅스 환경변수 등록" /><published>2018-10-01T00:00:00+09:00</published><updated>2018-10-01T00:00:00+09:00</updated><id>http://localhost:4000/linux/20181001/linux-environment-variable</id><content type="html" xml:base="http://localhost:4000/linux/20181001/linux-environment-variable">&lt;p&gt;환경변수 등록은 &lt;strong&gt;login shell&lt;/strong&gt; 과 &lt;strong&gt;none login shell&lt;/strong&gt; 로 구분되고 &lt;strong&gt;전역(global)&lt;/strong&gt; 등록과 &lt;strong&gt;지역(user)&lt;/strong&gt; 등록으로 나누어 진다. &lt;strong&gt;login shell&lt;/strong&gt; 은 아이디와 패스워드를 입력하고 로그인 후 세션이 생성될 때 처음 실행되는 shell 인데 예를 들면 putty 같은 클라이언트 프로그램을 통해 ssh 접속을 하는 것일 수 있다. &lt;strong&gt;none login shell&lt;/strong&gt; 은 이미 로그인 상태이거나 세션이 없을 때 실행되는 shell 인데 예를 들면 GUI 에서 터미널을 열어 shell 이 실행되거나 루트접속 시도(su)를 통해 shell 이 실행되는 것일 수 있다. &lt;strong&gt;전역(global)&lt;/strong&gt; 등록은 모든 유저에게 공통으로 적용되는 등록이고 &lt;strong&gt;지역(user)&lt;/strong&gt; 등록은 접속한 유저(본인)에게만 적용되는 등록이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-login-shell&quot;&gt;1. login shell&lt;/h3&gt;

&lt;p&gt;login shell 이 실행될 때 함께 로드되는 파일은 ‘&lt;strong&gt;/etc/profile&lt;/strong&gt;’, ‘&lt;strong&gt;~/.profile&lt;/strong&gt;’, ‘&lt;strong&gt;~/.bash_profile&lt;/strong&gt;’ 등이 있다. ‘&lt;strong&gt;/etc/profile&lt;/strong&gt;’, ‘&lt;strong&gt;~/.profile&lt;/strong&gt;’ 은 모든 shell 이 대상이고 ‘&lt;strong&gt;~/.bash_profile&lt;/strong&gt;’ 은 bash shell 이 대상이다. 또 다른 차이는 ‘&lt;strong&gt;/etc/profile&lt;/strong&gt;’ 은 전역(global) 등록이고 ‘&lt;strong&gt;~/.profile&lt;/strong&gt;’, ‘&lt;strong&gt;~/.bash_profile&lt;/strong&gt;’ 은 지역(user) 등록이다. 전역(global) 등록 파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; 디렉토리에 있고 지역(user) 파일은 유저의 &lt;code class=&quot;highlighter-rouge&quot;&gt;home(~)&lt;/code&gt; 디렉토리에 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;유저가 ssh 접속 후 bash shell 을 실행할 때 ‘/etc/profile’, ‘~/.profile’, ‘~/.bash_profile’ 순서로 로드될 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-none-login-shell&quot;&gt;2. none login shell&lt;/h3&gt;

&lt;p&gt;none login shell (bash shell) 이 실행될 때 로드되는 파일은 ‘&lt;strong&gt;/etc/bashrc&lt;/strong&gt;’, ‘&lt;strong&gt;~/.bashrc&lt;/strong&gt;’ 등이 있다. 역시 이 둘의 차이도 전역(global) 등록과 지역(user) 등록의 차이이다. ‘&lt;strong&gt;/etc/bashrc&lt;/strong&gt;’ 에 등록된 환경변수는 모든 유저에게 공통으로 로드될 것이고 ‘&lt;strong&gt;~/.bashrc&lt;/strong&gt;’ 에 등록된 환경변수는 접속한 유저(본인)에게만 로드될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-결론&quot;&gt;3. 결론&lt;/h3&gt;

&lt;p&gt;따라서 putty 같은 클라이언트 프로그램을 통해 ssh 접속 후 사용되어야 할 환경변수는 ‘&lt;strong&gt;/etc/profile&lt;/strong&gt;’, ‘&lt;strong&gt;~/.profile&lt;/strong&gt;’, ‘&lt;strong&gt;~/.bash_profile&lt;/strong&gt;’ 에 shell 종류와 적용대상에 맞게 등록하면 되겠다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;value 에 띄어쓰기가 있을 경우 반드시 &lt;strong&gt;“(쌍따옴표)&lt;/strong&gt;로 감싸줘야 한다. 또 shell 에서 명령어를 실행하여 환경변수를 바로 등록할 수 도 있지만 해당 세션이 끊길 경우 환경변수는 증발되므로 유의해야 한다. 등록된 환경변수는 아래 명령어로 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;또는 &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="linux" /><category term="bash" /><category term="profile" /><category term="command" /><summary type="html">환경변수 등록은 login shell 과 none login shell 로 구분되고 전역(global) 등록과 지역(user) 등록으로 나누어 진다. login shell 은 아이디와 패스워드를 입력하고 로그인 후 세션이 생성될 때 처음 실행되는 shell 인데 예를 들면 putty 같은 클라이언트 프로그램을 통해 ssh 접속을 하는 것일 수 있다. none login shell 은 이미 로그인 상태이거나 세션이 없을 때 실행되는 shell 인데 예를 들면 GUI 에서 터미널을 열어 shell 이 실행되거나 루트접속 시도(su)를 통해 shell 이 실행되는 것일 수 있다. 전역(global) 등록은 모든 유저에게 공통으로 적용되는 등록이고 지역(user) 등록은 접속한 유저(본인)에게만 적용되는 등록이다.</summary></entry><entry><title type="html">React Component Snippet</title><link href="http://localhost:4000/nodejs/react/20180914/react-component-snippet" rel="alternate" type="text/html" title="React Component Snippet" /><published>2018-09-14T00:00:00+09:00</published><updated>2018-09-14T00:00:00+09:00</updated><id>http://localhost:4000/nodejs/react/20180914/react-component-snippet</id><content type="html" xml:base="http://localhost:4000/nodejs/react/20180914/react-component-snippet">&lt;h2 id=&quot;1-user-snippets&quot;&gt;1. User Snippets&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/NodeJS/2018-09-14/react-component-snippet.png&quot; alt=&quot;React Snippet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-react-component-snippet-rc&quot;&gt;2. React Component Snippet (‘rc’)&lt;/h2&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react component set&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;import React, { Component } from 'react';&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;import PropTypes from 'prop-types';&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;const propTypes = {};&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;const defaultProps = {};&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;class $1 extends Component {&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;constructor(props) {&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;super(props);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;render() {&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return (&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;div&amp;gt;$1&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$1.propTypes = propTypes;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$1.defaultProps = defaultProps;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;export default $1;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="react" /><category term="snippet" /><summary type="html">1. User Snippets</summary></entry><entry><title type="html">C++ Addon Compile 을 위한 node-gyp</title><link href="http://localhost:4000/nodejs/20180914/nodejs-native-addon-module" rel="alternate" type="text/html" title="C++ Addon Compile 을 위한 node-gyp" /><published>2018-09-14T00:00:00+09:00</published><updated>2018-09-14T00:00:00+09:00</updated><id>http://localhost:4000/nodejs/20180914/nodejs-native-addon-module</id><content type="html" xml:base="http://localhost:4000/nodejs/20180914/nodejs-native-addon-module">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 을 통해 모듈을 설치하다 보면 &lt;a href=&quot;https://github.com/nodejs/node-gyp&quot;&gt;node-gyp&lt;/a&gt; 에러가 종종 발생하곤 한다. 보통 node-gyp 을 사용해야 되는데 설치가 안되어 있거나 또는 node-gyp 을 설치하려고 하는데 설치가 불가능하거나 하는 문제이다. node-gyp 이 무엇인지 알아보기 전에 NodeJS 스펙부터 살펴 볼 필요가 있다. NodeJS 는 CommonJs 표준과 V8 자바스크립트 엔진을 기반으로 만들어진 자바스크립트 런타임이다. 이 V8 자바스크립트 엔진은 C++ 언어로 작성되었으며 자바스크립트 코드를 기계어로 바꾸어 실행하는 역할을 한다. 그렇기 때문에 자바스크립트로 작성하던 모듈들도 C++ 언어로 작성하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; 할 수 있다. 스크립트 언어는 생산성이 좋고 편하지만 속도가 느리고 로우한 로직 또는 바이너리 처리가 힘들기 때문에 부분적으로 C++ 언어를 사용하여 모듈을 작성한다면 이런 단점을 보완하고 NodeJS 성능을 향상시킬 수 있다. 이 C++ 언어로 작성된 모듈을 ‘&lt;a href=&quot;https://nodejs.org/api/addons.html#addons_c_addons&quot;&gt;C++ Addon&lt;/a&gt;’ 또는 ‘Natvie Node Module’ 또는 ‘Native Addon Module’ 이라고 하며 Compile 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; 할 수 있다. 바로 이 Compile 작업을 해주는 도구가 node-gyp 인 것이다. node-gyp 말고도 직접 GCC Compiler 를 사용해 Compile 을 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;node-gyp-설치&quot;&gt;node-gyp 설치&lt;/h1&gt;

&lt;p&gt;node-gyp 을 설치하고 사용하려면 Python v2.7 과 C++ 언어를 Compile 할 수 있는 환경이 구축되있어야 한다. Python 버전은 반드시 2.7 이어야 함을 명심하자. Mac OS 라면 Python 이 기본적으로 설치되어 있을 것이고 Xcode 를 통해 나머지 환경만 조성하면 되겠다. 하지만 Windows 는 직접 둘을 설치하고 설정해야만 하는 번거로움이 있는데 정상적으로 설치했다고 해도 node-gyp 이 설치되지 않는 짜증나는 경우가 있다. 이를 해결해 줄 모듈이 바로 &lt;a href=&quot;https://www.npmjs.com/package/windows-build-tools&quot;&gt;windows-build-tools&lt;/a&gt; 이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 을 통해 이 모듈을 설치해주면 자동으로 실행되어 Visual C++ Build Tools (Free Charge) 와 Python 2.7 을 설치해준다. 또 C++ Addon 을 Compile 할 수 있도록 적당한 설정까지 완료해준다. 이미 어떤 환경이 조성되있더라도 충돌하지 않도록 잘 구분해서 설치해주기 때문에 충돌도 걱정할 필요가 없다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1. windows-build-tools&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Python 2.7, Visual C++ Build Tools 를 설치해주고 PATH 를 등록해 줌&lt;/li&gt;
      &lt;li&gt;Windows 7 또는 Windows Vista 일 경우 .NET Framework 4.5.1 을 미리 설치해야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 관리자 권한으로 실행
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--production&lt;/span&gt; windows-build-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;2. node-gyp&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; node-gyp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ Reference&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.naver.com/ojwojwoj/221266536930&quot;&gt;Node.js C++ 모듈 제작 하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://z-wony.tistory.com/12&quot;&gt;Node.js 용 c++ Addon을 gcc로 컴파일하기 (node-gyp 없이)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="nodejs" /><category term="node-gyp" /><category term="c++" /><category term="addon" /><summary type="html">npm 을 통해 모듈을 설치하다 보면 node-gyp 에러가 종종 발생하곤 한다. 보통 node-gyp 을 사용해야 되는데 설치가 안되어 있거나 또는 node-gyp 을 설치하려고 하는데 설치가 불가능하거나 하는 문제이다. node-gyp 이 무엇인지 알아보기 전에 NodeJS 스펙부터 살펴 볼 필요가 있다. NodeJS 는 CommonJs 표준과 V8 자바스크립트 엔진을 기반으로 만들어진 자바스크립트 런타임이다. 이 V8 자바스크립트 엔진은 C++ 언어로 작성되었으며 자바스크립트 코드를 기계어로 바꾸어 실행하는 역할을 한다. 그렇기 때문에 자바스크립트로 작성하던 모듈들도 C++ 언어로 작성하여 require 할 수 있다. 스크립트 언어는 생산성이 좋고 편하지만 속도가 느리고 로우한 로직 또는 바이너리 처리가 힘들기 때문에 부분적으로 C++ 언어를 사용하여 모듈을 작성한다면 이런 단점을 보완하고 NodeJS 성능을 향상시킬 수 있다. 이 C++ 언어로 작성된 모듈을 ‘C++ Addon’ 또는 ‘Natvie Node Module’ 또는 ‘Native Addon Module’ 이라고 하며 Compile 후 require 할 수 있다. 바로 이 Compile 작업을 해주는 도구가 node-gyp 인 것이다. node-gyp 말고도 직접 GCC Compiler 를 사용해 Compile 을 할 수도 있다.</summary></entry><entry><title type="html">IDE 기본폰트와 기본세팅 정리</title><link href="http://localhost:4000/etc/ide/20180914/ide-settings" rel="alternate" type="text/html" title="IDE 기본폰트와 기본세팅 정리" /><published>2018-09-14T00:00:00+09:00</published><updated>2018-09-14T00:00:00+09:00</updated><id>http://localhost:4000/etc/ide/20180914/ide-settings</id><content type="html" xml:base="http://localhost:4000/etc/ide/20180914/ide-settings">&lt;h2 id=&quot;1-자주-사용하는-폰트&quot;&gt;1. 자주 사용하는 폰트&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;D2 Coding&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://drive.google.com/open?id=1w68OjeNbabSGnSJyz2l7tq3RkG4ZYvPa&quot;&gt;&lt;img src=&quot;/assets/img/attach.png&quot; alt=&quot;다운로드&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Noto Sans CJK KR&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://drive.google.com/open?id=1p5OQPqZ8dyLuHLJ8B9qFN5BGmb4Sdhmo&quot;&gt;&lt;img src=&quot;/assets/img/attach.png&quot; alt=&quot;다운로드&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Noto Sans CJK KR (경량화 웹 폰트)&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://drive.google.com/open?id=17hG2bY-GUFcZhmK1ejagCsIqkmmCyAB6&quot;&gt;&lt;img src=&quot;/assets/img/attach.png&quot; alt=&quot;다운로드&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-visual-studio-code&quot;&gt;2. Visual Studio Code&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;User Settings&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://drive.google.com/open?id=1D18pfR_a_mduHdU9gP7TPF5Qvb_-iMWg&quot;&gt;&lt;img src=&quot;/assets/img/attach.png&quot; alt=&quot;다운로드&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Etc/2018-09-14/VisualStudioCodePlugin.png&quot; alt=&quot;Visual Studio Code Plugin&quot; /&gt;&lt;/p&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="ide" /><category term="font" /><category term="setting" /><summary type="html">1. 자주 사용하는 폰트</summary></entry><entry><title type="html">Windows 에서 Linux 사용하기</title><link href="http://localhost:4000/etc/windows/20180912/windows-wsl" rel="alternate" type="text/html" title="Windows 에서 Linux 사용하기" /><published>2018-09-12T00:00:00+09:00</published><updated>2018-09-12T00:00:00+09:00</updated><id>http://localhost:4000/etc/windows/20180912/windows-wsl</id><content type="html" xml:base="http://localhost:4000/etc/windows/20180912/windows-wsl">&lt;p&gt;&lt;strong&gt;WSL(Windows Subsystem for Linux)&lt;/strong&gt; 은 기존에 사용하던 가상머신(VMware, VirtualBox, Docker)이나 멀티부팅을 사용하지 않고도 Windows 위에 다이렉트로 Linux 환경을 만들어 준다. 이제는 Cmd, PowerShell, GitBash 를 사용하지 않고도 Bash 를 사용할 수 있게 되었으며 Linux 환경에서 실행할 수 있는 대부분의 유틸리티, 애플리케이션들도 실행할 수 있다. 현재 지원하고 있는 Linux 는 ‘Ubuntu’, ‘OpenSUSE’, ‘SLES’, ‘Kali Linux’, ‘Debian GNU/Linux’ 가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-설치하기&quot;&gt;1. 설치하기&lt;/h1&gt;

&lt;h2 id=&quot;1-시스템-요구사항&quot;&gt;1. 시스템 요구사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Windows 10 (64비트)&lt;/li&gt;
  &lt;li&gt;OS Build 16215 이상&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Etc/2018-09-12/system-info.png&quot; alt=&quot;system-info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-windows-subsystem-for-linux-사용-설정&quot;&gt;2. Windows Subsystem for Linux 사용 설정&lt;/h2&gt;

&lt;p&gt;아래 두 가지 방법 중 하고 싶은 방법으로 설정하고 재부팅하면 &lt;strong&gt;WSL&lt;/strong&gt; 을 사용할 수 있게 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PowerShell (관리자 권한으로 실행)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enable-WindowsOptionalFeature &lt;span class=&quot;nt&quot;&gt;-Online&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-FeatureName&lt;/span&gt; Microsoft-Windows-Subsystem-Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Windows 기능 켜기/끄기&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Etc/2018-09-12/config.png&quot; alt=&quot;config&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-linux-설치&quot;&gt;3. Linux 설치&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Microsoft Store&lt;/strong&gt; 에서 ‘&lt;strong&gt;linux&lt;/strong&gt;’ 로 검색하면 설치할 수 있는 Linux 들이 나온다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 를 설치하려면 &lt;strong&gt;16.04 LTS&lt;/strong&gt; 를 설치하자. 18.04 LTS 는 나온지 얼마 안되서 그런지 문제가 많은듯하다.
    &lt;ul&gt;
      &lt;li&gt;MongoDB 를 설치하려고 했는데 결국 성공하지 못함 (&lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu&quot;&gt;설치매뉴얼&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Etc/2018-09-12/search.png&quot; alt=&quot;config&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-linux-실행-ubuntu&quot;&gt;4. Linux 실행 (Ubuntu)&lt;/h2&gt;

&lt;p&gt;처음 실행하게 되면 계정을 생성하는 부분이 나온다. Windows 계정과 같은 Username 을 사용할 필요는 없으며 Username 과 Password 를 차례대로 입력하면 계정이 생성된다. 생성 후 바로 해당 계정으로 CLI 를 사용할 수 있다. Ubuntu 에서 root 권한으로 명령어를 실행하려면 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 를 붙여주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Etc/2018-09-12/install.png&quot; alt=&quot;install&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-유의사항&quot;&gt;5. 유의사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Linux 설치는 반드시 &lt;strong&gt;운영체제가 설치된 드라이브&lt;/strong&gt;에 설치해야 한다. 설치장소를 변경하려면 ‘설정 &amp;gt; 시스템 &amp;gt; 저장 공간 &amp;gt; 새 콘텐츠가 저장되는 위치 변경 &amp;gt; 새 앱 저장 위치’ 에서 할 수 있다.&lt;/li&gt;
  &lt;li&gt;Windows 에서 &lt;strong&gt;Linux 내부 파일&lt;/strong&gt;을 생성하거나 수정하면 데이터가 손상되거나 손실 될 수 있다. 더 심하면 Linux 를 다시 설치해야 될 수 있으므로 조심해야 한다.&lt;/li&gt;
  &lt;li&gt;Linux 에서 Windows 폴더나 파일을 Mount 하면 접근할 수 있다. 따라서 Windows 에서 개발하고 Linux 에서 테스트할 수 있는 환경을 구축할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; 는 설치할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-사용하기&quot;&gt;2. 사용하기&lt;/h1&gt;

&lt;h2 id=&quot;1-windows-드라이브에-접근하기&quot;&gt;1. Windows 드라이브에 접근하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Windows 드라이브가 이미 Linux 의 ‘&lt;strong&gt;/mnt&lt;/strong&gt;’ 폴더에 Mount 되어있다.&lt;/li&gt;
  &lt;li&gt;Windows 에 있는 프로젝트 폴더를 간편하게 접근할 수 있도록 &lt;strong&gt;심볼릭 링크&lt;/strong&gt;를 만든다.
    &lt;ul&gt;
      &lt;li&gt;Linux 를 실행하면 기본적으로 접속한 계정의 ‘&lt;strong&gt;home&lt;/strong&gt;’ 에서 시작한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;심볼릭 링크&lt;/strong&gt;를 만들면 Linux 안에 프로젝트 폴더가 있는 것처럼 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;아래는 계정의 ‘&lt;strong&gt;home&lt;/strong&gt;’ 안에 ‘&lt;strong&gt;dev&lt;/strong&gt;’ 폴더로 Windows ‘&lt;strong&gt;e 드라이브&lt;/strong&gt;’ 에 접근하도록 &lt;strong&gt;심볼릭 링크&lt;/strong&gt;를 만든 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ln -s [실제경로] [링크경로]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /mnt/e /home/lofty87/dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-npm-오류-해결하기&quot;&gt;2. NPM 오류 해결하기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 명령어를 사용해보니 아래와 같은 에러를 뿜었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;which npm&lt;/code&gt; 을 통해 실행파일의 위치도 확인했다. 구글링으로 Windows 에 설치된 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 을 사용해보려고 노력했지만 Windows 와 Linux 둘 다 설치하는 것이 해결책이었다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# error&lt;/span&gt;
: not foundram Files/nodejs/npm: 3: /mnt/c/Program Files/nodejs/npm:
: not foundram Files/nodejs/npm: 5: /mnt/c/Program Files/nodejs/npm:
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Package Manager 를 통해 NodeJS 설치&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download/package-manager&quot;&gt;공식사이트 링크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 명령어로 NodeJS 를 다운받고 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt; 명령어로 설치한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_8.x | &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; bash -

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nodejs

&lt;span class=&quot;c&quot;&gt;# 터미널 재시작 (환경변수 적용된 Bash 사용을 위해)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 'source ~/.profile' 을 실행해 바로 적용을 시도했지만 잘 안됨&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-zsh-사용하기&quot;&gt;3. Zsh 사용하기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Zsh(Z Shell)&lt;/strong&gt; 을 사용하는 방법은 Bash 와 비슷하다. 하지만 &lt;strong&gt;&lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh My Zsh&lt;/a&gt;&lt;/strong&gt; 프레임워크와 결합하면 Bash 보다 더 강력한 기능과 다양한 플러그인을 사용할 수 있다. 특히 탭을 통한 자동완성 기능이 향상됬고 예쁜 &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Themes&quot;&gt;테마&lt;/a&gt;들을 터미널에 적용할 수 있어 사용자들에게 인기가 높은 것 같다. 현재 140개가 넘는 테마와 200개가 넘는 플러그인이 있다. &lt;strong&gt;Oh My Zsh&lt;/strong&gt; 을 사용하기 위해서는 &lt;strong&gt;Zsh&lt;/strong&gt; 버전이 &lt;strong&gt;5.1.1&lt;/strong&gt; 이상이어야 하므로 설치하기 전 &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh --version&lt;/code&gt; 을 통해 &lt;strong&gt;Zsh&lt;/strong&gt; 버전을 확인하도록 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;탭으로 자동완성 기능을 사용하면서 또 탭을 누르게 되면 더 강력한 자동완성 기능을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd -&lt;/code&gt; 명령어는 히스토리에 쌓인 이전 경로로 이동할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ../../&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ...&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ../../../&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ....&lt;/code&gt; 같이 더 심플한 명령어로 상위 이동이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1. 사용하고 있는 기본 shell 확인&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2. zsh 설치&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zsh

&lt;span class=&quot;c&quot;&gt;# 3. zsh 버전 확인 (5.1.1 이상)&lt;/span&gt;
zsh &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 4. zsh 을 기본 shell 로 등록&lt;/span&gt;
chsh &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;which zsh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 5. 터미널을 재시작하게 되면 Z Shell 설정화면이 나온다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (2)번을 눌러 추천 설정이 미리 작성되있는 ~/.zshrc 을 생성한다. (아래 이미지 첨부)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 6. oh my zsh 설치&lt;/span&gt;
sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 7. 테마 설정 (vi 또는 vim 에디터를 통해 수정할 수 있고 본인이 원하는 테마를 선택)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ZSH_THEME=&quot;agnoster&quot;&lt;/span&gt;
vim ~/.zshrc

&lt;span class=&quot;c&quot;&gt;# 8. 테마 적용&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc

&lt;span class=&quot;c&quot;&gt;# 터미널 출력이 이상하다면 다른 폰트로 설정해 본다. (아래 이미지 첨부)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Z Shell 설정화면&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Etc/2018-09-12/zsh-config.png&quot; alt=&quot;zsh-config&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;터미널 폰트 수정하기&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Etc/2018-09-12/font-config.png&quot; alt=&quot;font-config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ Reference&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/ko-kr/windows/wsl/about&quot;&gt;About the Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/ko-kr/windows/wsl/install-win10&quot;&gt;Install the Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/WSL/issues/1512&quot;&gt;Issue running npm command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blur.kr/2018/06/19/Resolve-npm-command-issue-on-WSL&quot;&gt;Resolve npm command issue on Windows Subsystem Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://the-illusionist.me/47&quot;&gt;우분투에 ZSH와 OH MY ZSH 설치하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lofty87</name><email>lofty87@daum.net</email></author><category term="windows" /><category term="wsl" /><category term="linux" /><category term="zsh" /><summary type="html">WSL(Windows Subsystem for Linux) 은 기존에 사용하던 가상머신(VMware, VirtualBox, Docker)이나 멀티부팅을 사용하지 않고도 Windows 위에 다이렉트로 Linux 환경을 만들어 준다. 이제는 Cmd, PowerShell, GitBash 를 사용하지 않고도 Bash 를 사용할 수 있게 되었으며 Linux 환경에서 실행할 수 있는 대부분의 유틸리티, 애플리케이션들도 실행할 수 있다. 현재 지원하고 있는 Linux 는 ‘Ubuntu’, ‘OpenSUSE’, ‘SLES’, ‘Kali Linux’, ‘Debian GNU/Linux’ 가 있다.</summary></entry></feed>